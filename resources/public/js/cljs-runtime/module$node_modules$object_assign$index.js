shadow$provide.module$node_modules$object_assign$index = function(require, module, exports) {
  var getOwnPropertySymbols = Object.getOwnPropertySymbols, hasOwnProperty = Object.prototype.hasOwnProperty, propIsEnumerable = Object.prototype.propertyIsEnumerable;
  module.exports = function() {
    try {
      if (!Object.assign) {
        return !1;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return !1;
      }
      var test2 = {};
      for (test1 = 0; test1 < 10; test1++) {
        test2["_" + String.fromCharCode(test1)] = test1;
      }
      if (Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      }).join("") !== "0123456789") {
        return !1;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      return Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst" ? !1 : !0;
    } catch (err) {
      return !1;
    }
  }() ? Object.assign : function(target, source) {
    if (target === null || target === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    var to = Object(target);
    for (var symbols, s = 1; s < arguments.length; s++) {
      var from = Object(arguments[s]);
      for (var key in from) {
        hasOwnProperty.call(from, key) && (to[key] = from[key]);
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
        }
      }
    }
    return to;
  };
};

//# sourceMappingURL=module$node_modules$object_assign$index.js.map
